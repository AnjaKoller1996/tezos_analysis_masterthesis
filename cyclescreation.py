# -*- coding: utf-8 -*-
"""CyclesCreation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gTg6i0kyLFeYb_PoAJSAGMDO5IQtPuTG
"""

# cycle, start_time, active_bakers, working_bakers, staking_supply, staking_percent

import json
import requests
from pprint import pprint
import numpy as np

# create a DB with sqlite3
import sqlite3
conn = sqlite3.connect('tezos_cycles_data.db')
c = conn.cursor() # db saved in location where .py file is save

class Cycle:

  def __init__(self, cycle, start_time, active_bakers, working_bakers, staking_supply, staking_percent):
    self.cycle = cycle
    self.start_time = start_time
    self.active_bakers = active_bakers
    self.working_bakers = working_bakers
    self.staking_supply = staking_supply
    self.staking_percent = staking_percent

# Cycles (get cycles by cyclenumber)
api_url_cycles = 'https://api.tzstats.com/explorer/cycle/' # take cycle 0 to 404

# get all cycles
cycles = list(range(0,404))
#cycles = np.asarray(cycles)
#cycles = [str(x) for x in cycles] # TODO: why do we need strings -> problem with inserting integer below when its actually a string
#print('cycles before',cycles)
#cycles = np.asarray(cycles)
#print('cycles after',cycles)
cycles_response = []

for cy in cycles: 
  # can only concatenate strings therefore we need string here
  r = requests.get(api_url_cycles + str(cy))
  cycles_response.append(r.json())
print('cycles_response', cycles_response)
print('first entry', cycles_response[0])

# create a cycles table
c.execute(''' SELECT count(name) from sqlite_master where type='table' AND name='cycles' ''')

if c.fetchone()[0]==1:
  c.execute('DROP TABLE cycles')
  c.execute('''CREATE TABLE cycles (cycle integer, start_time text, active_bakers integer, working_bakers integer, staking_supply real, staking_percent real)''')
else: 
  c.execute('''CREATE TABLE cycles (cycle integer, start_time text, active_bakers integer, working_bakers integer, staking_supply real, staking_percent real)''')

def insert_cycles(cyc):
  with conn: 
    c.execute('INSERT INTO cycles VALUES(:cycle, :start_time, :active_bakers, :working_bakers, :staking_supply, :staking_percent)', {'cycle': cyc.cycle, 'start_time': cyc.start_time, 'active_bakers': cyc.active_bakers, 'working_bakers': cyc.working_bakers, 'staking_supply': cyc.staking_supply, 'staking_percent': cyc.staking_percent})

# add contract to db
if len(cycles) > 0:
  for cr in cycles_response:
    #print('cr',cr)
    #print('cr cycle', cr['cycle'])
    cyc = Cycle(cr['cycle'], cr['start_time'], cr['active_bakers'], cr['working_bakers'], cr['staking_supply'], cr['staking_percent'])
    insert_cycles(cyc)

conn.commit()